{"ast":null,"code":"// import Axios \nimport Axios from \"axios\"; // import config\n\nimport Config from \"./Config.Controller\";\n\nclass Stock {\n  constructor() {\n    this.addStock = async data => {\n      console.log(data);\n      var resp = 600;\n      var userData = {};\n      await Axios.post(`${Config.host}${Config.port}${this.api.addMachine}`, data).then(Response => {\n        console.log(Response);\n        resp = Response.status;\n        userData = Response.data.userData;\n      }).catch(err => {\n        console.log(err);\n\n        try {\n          console.error(err);\n          resp = err.response.status;\n        } catch (error) {\n          console.log(error);\n          resp = 600;\n        }\n      });\n\n      if (resp === 200) {\n        return resp;\n      }\n\n      return resp;\n    };\n\n    this.getAllMachine = () => {\n      return Axios.get(`${Config.host}${Config.port}${this.api.getAllMachine}`).then(Response => {\n        console.log(Response);\n        if (Response.status == 200) return Response.data;else return [];\n      }).catch(err => {\n        console.error(err);\n        return [];\n      });\n    };\n\n    this.getOne = async id => {\n      console.log(id);\n      var resp = 600;\n      var userData = {};\n      const data = await Axios.get(`${Config.host}${Config.port}${this.api.getMachine}/${id}`) // .then(response => {\n      //     console.log(response);\n      // }).catch(err => {\n      //     console.log(err);\n      // })\n      .then(Response => {\n        console.log(Response);\n        resp = Response.status;\n        userData = Response.data;\n      }).catch(err => {\n        console.error(err);\n\n        try {\n          console.error(err);\n          resp = err.response.status;\n        } catch (error) {\n          console.log(error);\n          resp = 600;\n        }\n      });\n\n      if (resp === 200) {\n        return userData;\n      }\n\n      return resp;\n    };\n\n    this.editMachine = async data => {\n      console.log(data);\n      var resp = 600;\n      var userData = {};\n      await Axios.post(`${Config.host}${Config.port}${this.api.updateMachine}`, data).then(Response => {\n        console.log(Response);\n        resp = Response.status;\n        userData = Response.data.userData;\n      }).catch(err => {\n        console.error(err);\n\n        try {\n          console.error(err);\n          resp = err.response.status;\n        } catch (error) {\n          console.log(error);\n          resp = 600;\n        }\n      });\n\n      if (resp === 200) {\n        return resp;\n      }\n\n      return resp;\n    };\n\n    this.deleteMachine = async data => {\n      console.log(data);\n      var resp = 600;\n      var userData = {};\n      await Axios.delete(`${Config.host}${Config.port}${this.api.deleteMachinet}/${data.id}`).then(Response => {\n        console.log(Response);\n        resp = Response.status;\n        userData = Response.data.userData;\n      }).catch(err => {\n        console.error(err);\n\n        try {\n          console.error(err);\n          resp = err.response.status;\n        } catch (error) {\n          console.log(error);\n          resp = 600;\n        }\n      });\n\n      if (resp === 200) {\n        return resp;\n      }\n\n      return resp;\n    };\n\n    // user related apis\n    this.api = {\n      addStock: \"/Stock/add\",\n      getAllStock: \"/Stock\",\n      updateStock: \"/Stock/update\",\n      deleteStock: \"/Stock/delete\",\n      getStock: \"/Stock/getOne\"\n    };\n  }\n\n}\n\nvar UserObject = new Machine();\nexport default UserObject;","map":{"version":3,"sources":["C:/Users/Sadi/Desktop/ITPM/Garment_Factory_Management/Garment_Factory_Management/frontend/src/Controllers/Stock.Controller.js"],"names":["Axios","Config","Stock","constructor","addStock","data","console","log","resp","userData","post","host","port","api","addMachine","then","Response","status","catch","err","error","response","getAllMachine","get","getOne","id","getMachine","editMachine","updateMachine","deleteMachine","delete","deleteMachinet","getAllStock","updateStock","deleteStock","getStock","UserObject","Machine"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,OAAOC,MAAP,MAAmB,qBAAnB;;AAEA,MAAMC,KAAN,CAAY;AACRC,EAAAA,WAAW,GAAG;AAAA,SAWdC,QAXc,GAWH,MAAOC,IAAP,IAAgB;AACvBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AAIA,UAAIG,IAAI,GAAG,GAAX;AACA,UAAIC,QAAQ,GAAG,EAAf;AACA,YAAMT,KAAK,CAACU,IAAN,CACD,GAAET,MAAM,CAACU,IAAK,GAAEV,MAAM,CAACW,IAAK,GAAE,KAAKC,GAAL,CAASC,UAAW,EADjD,EAEFT,IAFE,EAIDU,IAJC,CAIIC,QAAQ,IAAI;AACdV,QAAAA,OAAO,CAACC,GAAR,CAAYS,QAAZ;AAEAR,QAAAA,IAAI,GAAGQ,QAAQ,CAACC,MAAhB;AACAR,QAAAA,QAAQ,GAAGO,QAAQ,CAACX,IAAT,CAAcI,QAAzB;AACH,OATC,EAUDS,KAVC,CAUKC,GAAG,IAAI;AACVb,QAAAA,OAAO,CAACC,GAAR,CAAYY,GAAZ;;AACA,YAAI;AACAb,UAAAA,OAAO,CAACc,KAAR,CAAcD,GAAd;AACAX,UAAAA,IAAI,GAAGW,GAAG,CAACE,QAAJ,CAAaJ,MAApB;AACH,SAHD,CAGE,OAAOG,KAAP,EAAc;AACZd,UAAAA,OAAO,CAACC,GAAR,CAAYa,KAAZ;AACAZ,UAAAA,IAAI,GAAG,GAAP;AACH;AACJ,OAnBC,CAAN;;AAqBA,UAAIA,IAAI,KAAK,GAAb,EAAkB;AACd,eAAOA,IAAP;AACH;;AACD,aAAOA,IAAP;AACH,KA3Ca;;AAAA,SA+Cdc,aA/Cc,GA+CE,MAAM;AAElB,aAAOtB,KAAK,CAACuB,GAAN,CACF,GAAEtB,MAAM,CAACU,IAAK,GAAEV,MAAM,CAACW,IAAK,GAAE,KAAKC,GAAL,CAASS,aAAc,EADnD,EAGNP,IAHM,CAGDC,QAAQ,IAAI;AACdV,QAAAA,OAAO,CAACC,GAAR,CAAYS,QAAZ;AACA,YAAGA,QAAQ,CAACC,MAAT,IAAmB,GAAtB,EACI,OAAOD,QAAQ,CAACX,IAAhB,CADJ,KAGI,OAAO,EAAP;AACP,OATM,EAUNa,KAVM,CAUAC,GAAG,IAAI;AACVb,QAAAA,OAAO,CAACc,KAAR,CAAcD,GAAd;AACA,eAAO,EAAP;AACH,OAbM,CAAP;AAeH,KAhEa;;AAAA,SAkEdK,MAlEc,GAkEL,MAAOC,EAAP,IAAc;AACnBnB,MAAAA,OAAO,CAACC,GAAR,CAAYkB,EAAZ;AACA,UAAIjB,IAAI,GAAG,GAAX;AACA,UAAIC,QAAQ,GAAG,EAAf;AACA,YAAMJ,IAAI,GAAG,MAAML,KAAK,CAACuB,GAAN,CACd,GAAEtB,MAAM,CAACU,IAAK,GAAEV,MAAM,CAACW,IAAK,GAAE,KAAKC,GAAL,CAASa,UAAW,IAAGD,EAAG,EAD1C,EAEf;AACA;AACA;AACA;AACA;AANe,OAQdV,IARc,CAQTC,QAAQ,IAAI;AACdV,QAAAA,OAAO,CAACC,GAAR,CAAYS,QAAZ;AAEAR,QAAAA,IAAI,GAAGQ,QAAQ,CAACC,MAAhB;AACAR,QAAAA,QAAQ,GAAGO,QAAQ,CAACX,IAApB;AACH,OAbc,EAcda,KAdc,CAcRC,GAAG,IAAI;AACVb,QAAAA,OAAO,CAACc,KAAR,CAAcD,GAAd;;AACA,YAAI;AACAb,UAAAA,OAAO,CAACc,KAAR,CAAcD,GAAd;AACAX,UAAAA,IAAI,GAAGW,GAAG,CAACE,QAAJ,CAAaJ,MAApB;AACH,SAHD,CAGE,OAAOG,KAAP,EAAc;AACZd,UAAAA,OAAO,CAACC,GAAR,CAAYa,KAAZ;AACAZ,UAAAA,IAAI,GAAG,GAAP;AACH;AACJ,OAvBc,CAAnB;;AAyBA,UAAIA,IAAI,KAAK,GAAb,EAAkB;AACd,eAAOC,QAAP;AACH;;AACD,aAAOD,IAAP;AACH,KAnGa;;AAAA,SAsGdmB,WAtGc,GAsGA,MAAOtB,IAAP,IAAgB;AAC1BC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AAIA,UAAIG,IAAI,GAAG,GAAX;AACA,UAAIC,QAAQ,GAAG,EAAf;AACA,YAAMT,KAAK,CAACU,IAAN,CACD,GAAET,MAAM,CAACU,IAAK,GAAEV,MAAM,CAACW,IAAK,GAAE,KAAKC,GAAL,CAASe,aAAc,EADpD,EAEFvB,IAFE,EAIDU,IAJC,CAIIC,QAAQ,IAAI;AACdV,QAAAA,OAAO,CAACC,GAAR,CAAYS,QAAZ;AAEAR,QAAAA,IAAI,GAAGQ,QAAQ,CAACC,MAAhB;AACAR,QAAAA,QAAQ,GAAGO,QAAQ,CAACX,IAAT,CAAcI,QAAzB;AACH,OATC,EAUDS,KAVC,CAUKC,GAAG,IAAI;AACVb,QAAAA,OAAO,CAACc,KAAR,CAAcD,GAAd;;AACA,YAAI;AACAb,UAAAA,OAAO,CAACc,KAAR,CAAcD,GAAd;AACAX,UAAAA,IAAI,GAAGW,GAAG,CAACE,QAAJ,CAAaJ,MAApB;AACH,SAHD,CAGE,OAAOG,KAAP,EAAc;AACZd,UAAAA,OAAO,CAACC,GAAR,CAAYa,KAAZ;AACAZ,UAAAA,IAAI,GAAG,GAAP;AACH;AACJ,OAnBC,CAAN;;AAqBA,UAAIA,IAAI,KAAK,GAAb,EAAkB;AACd,eAAOA,IAAP;AACH;;AACD,aAAOA,IAAP;AACH,KAtIa;;AAAA,SAwIdqB,aAxIc,GAwIE,MAAOxB,IAAP,IAAgB;AAC5BC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AAIA,UAAIG,IAAI,GAAG,GAAX;AACA,UAAIC,QAAQ,GAAG,EAAf;AACA,YAAMT,KAAK,CAAC8B,MAAN,CACD,GAAE7B,MAAM,CAACU,IAAK,GAAEV,MAAM,CAACW,IAAK,GAAE,KAAKC,GAAL,CAASkB,cAAe,IAAG1B,IAAI,CAACoB,EAAG,EADhE,EAGDV,IAHC,CAGIC,QAAQ,IAAI;AACdV,QAAAA,OAAO,CAACC,GAAR,CAAYS,QAAZ;AAEAR,QAAAA,IAAI,GAAGQ,QAAQ,CAACC,MAAhB;AACAR,QAAAA,QAAQ,GAAGO,QAAQ,CAACX,IAAT,CAAcI,QAAzB;AACH,OARC,EASDS,KATC,CASKC,GAAG,IAAI;AACVb,QAAAA,OAAO,CAACc,KAAR,CAAcD,GAAd;;AACA,YAAI;AACAb,UAAAA,OAAO,CAACc,KAAR,CAAcD,GAAd;AACAX,UAAAA,IAAI,GAAGW,GAAG,CAACE,QAAJ,CAAaJ,MAApB;AACH,SAHD,CAGE,OAAOG,KAAP,EAAc;AACZd,UAAAA,OAAO,CAACC,GAAR,CAAYa,KAAZ;AACAZ,UAAAA,IAAI,GAAG,GAAP;AACH;AACJ,OAlBC,CAAN;;AAoBA,UAAIA,IAAI,KAAK,GAAb,EAAkB;AACd,eAAOA,IAAP;AACH;;AACD,aAAOA,IAAP;AACH,KAvKa;;AACV;AACA,SAAKK,GAAL,GAAW;AACPT,MAAAA,QAAQ,EAAE,YADH;AAEP4B,MAAAA,WAAW,EAAE,QAFN;AAGPC,MAAAA,WAAW,EAAE,eAHN;AAIPC,MAAAA,WAAW,EAAE,eAJN;AAKPC,MAAAA,QAAQ,EAAE;AALH,KAAX;AAOH;;AAVO;;AA0KZ,IAAIC,UAAU,GAAG,IAAIC,OAAJ,EAAjB;AACA,eAAeD,UAAf","sourcesContent":["// import Axios \r\nimport Axios from \"axios\";\r\n\r\n// import config\r\nimport Config from \"./Config.Controller\";\r\n\r\nclass Stock {\r\n    constructor() {\r\n        // user related apis\r\n        this.api = {\r\n            addStock: \"/Stock/add\",\r\n            getAllStock: \"/Stock\",\r\n            updateStock: \"/Stock/update\",\r\n            deleteStock: \"/Stock/delete\",\r\n            getStock: \"/Stock/getOne\",\r\n        };\r\n    }\r\n\r\n    addStock = async (data) => {\r\n        console.log(data);\r\n\r\n\r\n\r\n        var resp = 600;\r\n        var userData = {}\r\n        await Axios.post(\r\n            `${Config.host}${Config.port}${this.api.addMachine}`,\r\n            data\r\n        )\r\n            .then(Response => {\r\n                console.log(Response);\r\n\r\n                resp = Response.status;\r\n                userData = Response.data.userData\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                try {\r\n                    console.error(err);\r\n                    resp = err.response.status;\r\n                } catch (error) {\r\n                    console.log(error);\r\n                    resp = 600;\r\n                }\r\n            });\r\n\r\n        if (resp === 200) {\r\n            return resp;\r\n        }\r\n        return resp;\r\n    }\r\n\r\n\r\n\r\n    getAllMachine = () => {\r\n \r\n        return Axios.get(\r\n            `${Config.host}${Config.port}${this.api.getAllMachine}`,\r\n        )\r\n        .then(Response => {\r\n            console.log(Response);\r\n            if(Response.status == 200 )\r\n                return Response.data;\r\n            else\r\n                return []\r\n        })\r\n        .catch(err => {\r\n            console.error(err);\r\n            return [];    \r\n        });\r\n\r\n    }\r\n\r\n    getOne = async (id) => {\r\n        console.log(id);\r\n        var resp = 600;\r\n        var userData = {}\r\n        const data = await Axios.get(\r\n            `${Config.host}${Config.port}${this.api.getMachine}/${id}`,)\r\n            // .then(response => {\r\n            //     console.log(response);\r\n            // }).catch(err => {\r\n            //     console.log(err);\r\n            // })\r\n        \r\n            .then(Response => {\r\n                console.log(Response);\r\n\r\n                resp = Response.status;\r\n                userData = Response.data\r\n            })\r\n            .catch(err => {\r\n                console.error(err);\r\n                try {\r\n                    console.error(err);\r\n                    resp = err.response.status;\r\n                } catch (error) {\r\n                    console.log(error);\r\n                    resp = 600;\r\n                }\r\n            });\r\n\r\n        if (resp === 200) {\r\n            return userData;\r\n        }\r\n        return resp;\r\n    }\r\n\r\n\r\n    editMachine = async (data) => {\r\n        console.log(data);\r\n\r\n\r\n\r\n        var resp = 600;\r\n        var userData = {}\r\n        await Axios.post(\r\n            `${Config.host}${Config.port}${this.api.updateMachine}`,\r\n            data\r\n        )\r\n            .then(Response => {\r\n                console.log(Response);\r\n\r\n                resp = Response.status;\r\n                userData = Response.data.userData\r\n            })\r\n            .catch(err => {\r\n                console.error(err);\r\n                try {\r\n                    console.error(err);\r\n                    resp = err.response.status;\r\n                } catch (error) {\r\n                    console.log(error);\r\n                    resp = 600;\r\n                }\r\n            });\r\n\r\n        if (resp === 200) {\r\n            return resp;\r\n        }\r\n        return resp;\r\n    }\r\n\r\n    deleteMachine = async (data) => {\r\n        console.log(data);\r\n\r\n\r\n\r\n        var resp = 600;\r\n        var userData = {}\r\n        await Axios.delete(\r\n            `${Config.host}${Config.port}${this.api.deleteMachinet}/${data.id}`,\r\n        )\r\n            .then(Response => {\r\n                console.log(Response);\r\n\r\n                resp = Response.status;\r\n                userData = Response.data.userData\r\n            })\r\n            .catch(err => {\r\n                console.error(err);\r\n                try {\r\n                    console.error(err);\r\n                    resp = err.response.status;\r\n                } catch (error) {\r\n                    console.log(error);\r\n                    resp = 600;\r\n                }\r\n            });\r\n\r\n        if (resp === 200) {\r\n            return resp;\r\n        }\r\n        return resp;\r\n    }\r\n}\r\nvar UserObject = new Machine();\r\nexport default UserObject;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// import Axios \nimport Axios from \"axios\"; // import config\n\nimport Config from \"./Config.Controller\";\n\nclass Stock {\n  constructor() {\n    this.addMachine = async data => {\n      console.log(data);\n      var resp = 600;\n      var userData = {};\n      await Axios.post(`${Config.host}${Config.port}${this.api.addMachine}`, data).then(Response => {\n        console.log(Response);\n        resp = Response.status;\n        userData = Response.data.userData;\n      }).catch(err => {\n        console.log(err);\n\n        try {\n          console.error(err);\n          resp = err.response.status;\n        } catch (error) {\n          console.log(error);\n          resp = 600;\n        }\n      });\n\n      if (resp === 200) {\n        return resp;\n      }\n\n      return resp;\n    };\n\n    this.getAllMachine = () => {\n      return Axios.get(`${Config.host}${Config.port}${this.api.getAllMachine}`).then(Response => {\n        console.log(Response);\n        if (Response.status == 200) return Response.data;else return [];\n      }).catch(err => {\n        console.error(err);\n        return [];\n      });\n    };\n\n    this.getOne = async id => {\n      console.log(id);\n      var resp = 600;\n      var userData = {};\n      const data = await Axios.get(`${Config.host}${Config.port}${this.api.getMachine}/${id}`) // .then(response => {\n      //     console.log(response);\n      // }).catch(err => {\n      //     console.log(err);\n      // })\n      .then(Response => {\n        console.log(Response);\n        resp = Response.status;\n        userData = Response.data;\n      }).catch(err => {\n        console.error(err);\n\n        try {\n          console.error(err);\n          resp = err.response.status;\n        } catch (error) {\n          console.log(error);\n          resp = 600;\n        }\n      });\n\n      if (resp === 200) {\n        return userData;\n      }\n\n      return resp;\n    };\n\n    this.editMachine = async data => {\n      console.log(data);\n      var resp = 600;\n      var userData = {};\n      await Axios.post(`${Config.host}${Config.port}${this.api.updateMachine}`, data).then(Response => {\n        console.log(Response);\n        resp = Response.status;\n        userData = Response.data.userData;\n      }).catch(err => {\n        console.error(err);\n\n        try {\n          console.error(err);\n          resp = err.response.status;\n        } catch (error) {\n          console.log(error);\n          resp = 600;\n        }\n      });\n\n      if (resp === 200) {\n        return resp;\n      }\n\n      return resp;\n    };\n\n    this.deleteMachine = async data => {\n      console.log(data);\n      var resp = 600;\n      var userData = {};\n      await Axios.delete(`${Config.host}${Config.port}${this.api.deleteMachinet}/${data.id}`).then(Response => {\n        console.log(Response);\n        resp = Response.status;\n        userData = Response.data.userData;\n      }).catch(err => {\n        console.error(err);\n\n        try {\n          console.error(err);\n          resp = err.response.status;\n        } catch (error) {\n          console.log(error);\n          resp = 600;\n        }\n      });\n\n      if (resp === 200) {\n        return resp;\n      }\n\n      return resp;\n    };\n\n    // user related apis\n    this.api = {\n      addMachine: \"/Machine/add\",\n      getAllMachine: \"/Machine\",\n      updateMachine: \"/Machine/update\",\n      deleteMachine: \"/Machine/delete\",\n      getMachine: \"/Machine/getOne\"\n    };\n  }\n\n}\n\nvar UserObject = new Machine();\nexport default UserObject;","map":{"version":3,"sources":["C:/Users/Sadi/Desktop/ITPM/Garment_Factory_Management/Garment_Factory_Management/frontend/src/Controllers/Stock.Controller.js"],"names":["Axios","Config","Stock","constructor","addMachine","data","console","log","resp","userData","post","host","port","api","then","Response","status","catch","err","error","response","getAllMachine","get","getOne","id","getMachine","editMachine","updateMachine","deleteMachine","delete","deleteMachinet","UserObject","Machine"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,OAAOC,MAAP,MAAmB,qBAAnB;;AAEA,MAAMC,KAAN,CAAY;AACRC,EAAAA,WAAW,GAAG;AAAA,SAWdC,UAXc,GAWD,MAAOC,IAAP,IAAgB;AACzBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AAIA,UAAIG,IAAI,GAAG,GAAX;AACA,UAAIC,QAAQ,GAAG,EAAf;AACA,YAAMT,KAAK,CAACU,IAAN,CACD,GAAET,MAAM,CAACU,IAAK,GAAEV,MAAM,CAACW,IAAK,GAAE,KAAKC,GAAL,CAAST,UAAW,EADjD,EAEFC,IAFE,EAIDS,IAJC,CAIIC,QAAQ,IAAI;AACdT,QAAAA,OAAO,CAACC,GAAR,CAAYQ,QAAZ;AAEAP,QAAAA,IAAI,GAAGO,QAAQ,CAACC,MAAhB;AACAP,QAAAA,QAAQ,GAAGM,QAAQ,CAACV,IAAT,CAAcI,QAAzB;AACH,OATC,EAUDQ,KAVC,CAUKC,GAAG,IAAI;AACVZ,QAAAA,OAAO,CAACC,GAAR,CAAYW,GAAZ;;AACA,YAAI;AACAZ,UAAAA,OAAO,CAACa,KAAR,CAAcD,GAAd;AACAV,UAAAA,IAAI,GAAGU,GAAG,CAACE,QAAJ,CAAaJ,MAApB;AACH,SAHD,CAGE,OAAOG,KAAP,EAAc;AACZb,UAAAA,OAAO,CAACC,GAAR,CAAYY,KAAZ;AACAX,UAAAA,IAAI,GAAG,GAAP;AACH;AACJ,OAnBC,CAAN;;AAqBA,UAAIA,IAAI,KAAK,GAAb,EAAkB;AACd,eAAOA,IAAP;AACH;;AACD,aAAOA,IAAP;AACH,KA3Ca;;AAAA,SA+Cda,aA/Cc,GA+CE,MAAM;AAElB,aAAOrB,KAAK,CAACsB,GAAN,CACF,GAAErB,MAAM,CAACU,IAAK,GAAEV,MAAM,CAACW,IAAK,GAAE,KAAKC,GAAL,CAASQ,aAAc,EADnD,EAGNP,IAHM,CAGDC,QAAQ,IAAI;AACdT,QAAAA,OAAO,CAACC,GAAR,CAAYQ,QAAZ;AACA,YAAGA,QAAQ,CAACC,MAAT,IAAmB,GAAtB,EACI,OAAOD,QAAQ,CAACV,IAAhB,CADJ,KAGI,OAAO,EAAP;AACP,OATM,EAUNY,KAVM,CAUAC,GAAG,IAAI;AACVZ,QAAAA,OAAO,CAACa,KAAR,CAAcD,GAAd;AACA,eAAO,EAAP;AACH,OAbM,CAAP;AAeH,KAhEa;;AAAA,SAkEdK,MAlEc,GAkEL,MAAOC,EAAP,IAAc;AACnBlB,MAAAA,OAAO,CAACC,GAAR,CAAYiB,EAAZ;AACA,UAAIhB,IAAI,GAAG,GAAX;AACA,UAAIC,QAAQ,GAAG,EAAf;AACA,YAAMJ,IAAI,GAAG,MAAML,KAAK,CAACsB,GAAN,CACd,GAAErB,MAAM,CAACU,IAAK,GAAEV,MAAM,CAACW,IAAK,GAAE,KAAKC,GAAL,CAASY,UAAW,IAAGD,EAAG,EAD1C,EAEf;AACA;AACA;AACA;AACA;AANe,OAQdV,IARc,CAQTC,QAAQ,IAAI;AACdT,QAAAA,OAAO,CAACC,GAAR,CAAYQ,QAAZ;AAEAP,QAAAA,IAAI,GAAGO,QAAQ,CAACC,MAAhB;AACAP,QAAAA,QAAQ,GAAGM,QAAQ,CAACV,IAApB;AACH,OAbc,EAcdY,KAdc,CAcRC,GAAG,IAAI;AACVZ,QAAAA,OAAO,CAACa,KAAR,CAAcD,GAAd;;AACA,YAAI;AACAZ,UAAAA,OAAO,CAACa,KAAR,CAAcD,GAAd;AACAV,UAAAA,IAAI,GAAGU,GAAG,CAACE,QAAJ,CAAaJ,MAApB;AACH,SAHD,CAGE,OAAOG,KAAP,EAAc;AACZb,UAAAA,OAAO,CAACC,GAAR,CAAYY,KAAZ;AACAX,UAAAA,IAAI,GAAG,GAAP;AACH;AACJ,OAvBc,CAAnB;;AAyBA,UAAIA,IAAI,KAAK,GAAb,EAAkB;AACd,eAAOC,QAAP;AACH;;AACD,aAAOD,IAAP;AACH,KAnGa;;AAAA,SAsGdkB,WAtGc,GAsGA,MAAOrB,IAAP,IAAgB;AAC1BC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AAIA,UAAIG,IAAI,GAAG,GAAX;AACA,UAAIC,QAAQ,GAAG,EAAf;AACA,YAAMT,KAAK,CAACU,IAAN,CACD,GAAET,MAAM,CAACU,IAAK,GAAEV,MAAM,CAACW,IAAK,GAAE,KAAKC,GAAL,CAASc,aAAc,EADpD,EAEFtB,IAFE,EAIDS,IAJC,CAIIC,QAAQ,IAAI;AACdT,QAAAA,OAAO,CAACC,GAAR,CAAYQ,QAAZ;AAEAP,QAAAA,IAAI,GAAGO,QAAQ,CAACC,MAAhB;AACAP,QAAAA,QAAQ,GAAGM,QAAQ,CAACV,IAAT,CAAcI,QAAzB;AACH,OATC,EAUDQ,KAVC,CAUKC,GAAG,IAAI;AACVZ,QAAAA,OAAO,CAACa,KAAR,CAAcD,GAAd;;AACA,YAAI;AACAZ,UAAAA,OAAO,CAACa,KAAR,CAAcD,GAAd;AACAV,UAAAA,IAAI,GAAGU,GAAG,CAACE,QAAJ,CAAaJ,MAApB;AACH,SAHD,CAGE,OAAOG,KAAP,EAAc;AACZb,UAAAA,OAAO,CAACC,GAAR,CAAYY,KAAZ;AACAX,UAAAA,IAAI,GAAG,GAAP;AACH;AACJ,OAnBC,CAAN;;AAqBA,UAAIA,IAAI,KAAK,GAAb,EAAkB;AACd,eAAOA,IAAP;AACH;;AACD,aAAOA,IAAP;AACH,KAtIa;;AAAA,SAwIdoB,aAxIc,GAwIE,MAAOvB,IAAP,IAAgB;AAC5BC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AAIA,UAAIG,IAAI,GAAG,GAAX;AACA,UAAIC,QAAQ,GAAG,EAAf;AACA,YAAMT,KAAK,CAAC6B,MAAN,CACD,GAAE5B,MAAM,CAACU,IAAK,GAAEV,MAAM,CAACW,IAAK,GAAE,KAAKC,GAAL,CAASiB,cAAe,IAAGzB,IAAI,CAACmB,EAAG,EADhE,EAGDV,IAHC,CAGIC,QAAQ,IAAI;AACdT,QAAAA,OAAO,CAACC,GAAR,CAAYQ,QAAZ;AAEAP,QAAAA,IAAI,GAAGO,QAAQ,CAACC,MAAhB;AACAP,QAAAA,QAAQ,GAAGM,QAAQ,CAACV,IAAT,CAAcI,QAAzB;AACH,OARC,EASDQ,KATC,CASKC,GAAG,IAAI;AACVZ,QAAAA,OAAO,CAACa,KAAR,CAAcD,GAAd;;AACA,YAAI;AACAZ,UAAAA,OAAO,CAACa,KAAR,CAAcD,GAAd;AACAV,UAAAA,IAAI,GAAGU,GAAG,CAACE,QAAJ,CAAaJ,MAApB;AACH,SAHD,CAGE,OAAOG,KAAP,EAAc;AACZb,UAAAA,OAAO,CAACC,GAAR,CAAYY,KAAZ;AACAX,UAAAA,IAAI,GAAG,GAAP;AACH;AACJ,OAlBC,CAAN;;AAoBA,UAAIA,IAAI,KAAK,GAAb,EAAkB;AACd,eAAOA,IAAP;AACH;;AACD,aAAOA,IAAP;AACH,KAvKa;;AACV;AACA,SAAKK,GAAL,GAAW;AACPT,MAAAA,UAAU,EAAE,cADL;AAEPiB,MAAAA,aAAa,EAAE,UAFR;AAGPM,MAAAA,aAAa,EAAE,iBAHR;AAIPC,MAAAA,aAAa,EAAE,iBAJR;AAKPH,MAAAA,UAAU,EAAE;AALL,KAAX;AAOH;;AAVO;;AA0KZ,IAAIM,UAAU,GAAG,IAAIC,OAAJ,EAAjB;AACA,eAAeD,UAAf","sourcesContent":["// import Axios \r\nimport Axios from \"axios\";\r\n\r\n// import config\r\nimport Config from \"./Config.Controller\";\r\n\r\nclass Stock {\r\n    constructor() {\r\n        // user related apis\r\n        this.api = {\r\n            addMachine: \"/Machine/add\",\r\n            getAllMachine: \"/Machine\",\r\n            updateMachine: \"/Machine/update\",\r\n            deleteMachine: \"/Machine/delete\",\r\n            getMachine: \"/Machine/getOne\",\r\n        };\r\n    }\r\n\r\n    addMachine = async (data) => {\r\n        console.log(data);\r\n\r\n\r\n\r\n        var resp = 600;\r\n        var userData = {}\r\n        await Axios.post(\r\n            `${Config.host}${Config.port}${this.api.addMachine}`,\r\n            data\r\n        )\r\n            .then(Response => {\r\n                console.log(Response);\r\n\r\n                resp = Response.status;\r\n                userData = Response.data.userData\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                try {\r\n                    console.error(err);\r\n                    resp = err.response.status;\r\n                } catch (error) {\r\n                    console.log(error);\r\n                    resp = 600;\r\n                }\r\n            });\r\n\r\n        if (resp === 200) {\r\n            return resp;\r\n        }\r\n        return resp;\r\n    }\r\n\r\n\r\n\r\n    getAllMachine = () => {\r\n \r\n        return Axios.get(\r\n            `${Config.host}${Config.port}${this.api.getAllMachine}`,\r\n        )\r\n        .then(Response => {\r\n            console.log(Response);\r\n            if(Response.status == 200 )\r\n                return Response.data;\r\n            else\r\n                return []\r\n        })\r\n        .catch(err => {\r\n            console.error(err);\r\n            return [];    \r\n        });\r\n\r\n    }\r\n\r\n    getOne = async (id) => {\r\n        console.log(id);\r\n        var resp = 600;\r\n        var userData = {}\r\n        const data = await Axios.get(\r\n            `${Config.host}${Config.port}${this.api.getMachine}/${id}`,)\r\n            // .then(response => {\r\n            //     console.log(response);\r\n            // }).catch(err => {\r\n            //     console.log(err);\r\n            // })\r\n        \r\n            .then(Response => {\r\n                console.log(Response);\r\n\r\n                resp = Response.status;\r\n                userData = Response.data\r\n            })\r\n            .catch(err => {\r\n                console.error(err);\r\n                try {\r\n                    console.error(err);\r\n                    resp = err.response.status;\r\n                } catch (error) {\r\n                    console.log(error);\r\n                    resp = 600;\r\n                }\r\n            });\r\n\r\n        if (resp === 200) {\r\n            return userData;\r\n        }\r\n        return resp;\r\n    }\r\n\r\n\r\n    editMachine = async (data) => {\r\n        console.log(data);\r\n\r\n\r\n\r\n        var resp = 600;\r\n        var userData = {}\r\n        await Axios.post(\r\n            `${Config.host}${Config.port}${this.api.updateMachine}`,\r\n            data\r\n        )\r\n            .then(Response => {\r\n                console.log(Response);\r\n\r\n                resp = Response.status;\r\n                userData = Response.data.userData\r\n            })\r\n            .catch(err => {\r\n                console.error(err);\r\n                try {\r\n                    console.error(err);\r\n                    resp = err.response.status;\r\n                } catch (error) {\r\n                    console.log(error);\r\n                    resp = 600;\r\n                }\r\n            });\r\n\r\n        if (resp === 200) {\r\n            return resp;\r\n        }\r\n        return resp;\r\n    }\r\n\r\n    deleteMachine = async (data) => {\r\n        console.log(data);\r\n\r\n\r\n\r\n        var resp = 600;\r\n        var userData = {}\r\n        await Axios.delete(\r\n            `${Config.host}${Config.port}${this.api.deleteMachinet}/${data.id}`,\r\n        )\r\n            .then(Response => {\r\n                console.log(Response);\r\n\r\n                resp = Response.status;\r\n                userData = Response.data.userData\r\n            })\r\n            .catch(err => {\r\n                console.error(err);\r\n                try {\r\n                    console.error(err);\r\n                    resp = err.response.status;\r\n                } catch (error) {\r\n                    console.log(error);\r\n                    resp = 600;\r\n                }\r\n            });\r\n\r\n        if (resp === 200) {\r\n            return resp;\r\n        }\r\n        return resp;\r\n    }\r\n}\r\nvar UserObject = new Machine();\r\nexport default UserObject;"]},"metadata":{},"sourceType":"module"}